AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: back-end functionalities of sll-crudApp project

Globals:
  Function:
    Timeout: 30
    CodeUri: src/
    Runtime: python3.8
    Architectures:
      - x86_64

Parameters:
  AppName:
    Type: String
    Description: Name of the application
    Default: sll-crud
  Region:
    Type: String
    Default: us-east-2
  ClientDomains:
    Type: CommaDelimitedList
    Description: List of domains

Resources:

        # ///---------------User Pool-----------------/// 
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AppName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
        # - client_credentials
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      GroupName: !Sub ${AppName}-Users
      Description: User Group
      Precedence: 0
      UserPoolId: !Ref UserPool

        # ///---------------Dynamo Table-----------------/// 
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: "Menu_Item"
      AttributeDefinitions:
        -
          AttributeName: "PK"
          AttributeType: "S"
        -
          AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "PK"
          KeyType: "HASH"
        -
          AttributeName: "SK"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

        # ///---------------Roles and Policies-----------------/// 
  CognitoRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'mediaconvert.amazonaws.com'
                - 'cloudfront.amazonaws.com'
                - !Sub "states.${AWS::Region}.amazonaws.com"
                - 'mediapackage.amazonaws.com'
                - 'rds.amazonaws.com'
                - 'secretsmanager.amazonaws.com'
                - 'dax.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "cloudwatch:*"
                  - "cognito-identity:*"
                  - "cognito-idp:*"
                  - "cognito-sync:*"
                  - "dynamodb:*"
                Resource: '*'
 
        # ///---------------API's-----------------/// 
  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

        # ///---------------Lambda Functions-----------------/// 
  ListItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list_fn.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region  
          TABLE_NAME: !Ref DynamoTable  
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient  
      Role: !GetAtt CognitoRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
      Events:
        CreateEvent:
          Type: Api
          Properties:
            Path:  /list
            Method: post
            RestApiId: !Ref DefaultApi

  ReadFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read_fn.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region 
          TABLE_NAME: !Ref DynamoTable   
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient  
      Role: !GetAtt CognitoRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
      Events:
        ReadEvent:
          Type: Api
          Properties:
            Path:  /read
            Method: post
            RestApiId: !Ref DefaultApi

  UpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update_fn.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region  
          TABLE_NAME: !Ref DynamoTable    
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn 
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
      Events:
        UpdateEvent:
          Type: Api
          Properties:
            Path:  /update
            Method: post
            RestApiId: !Ref DefaultApi

  DeleteFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: delete_fn.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region 
          TABLE_NAME: !Ref DynamoTable  
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient   
      Role: !GetAtt CognitoRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            Path:  /delete
            Method: post
            RestApiId: !Ref DefaultApi

  InsertFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: insert_fn.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region      
          TABLE_NAME: !Ref DynamoTable
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
      Events:
        InsertEvent:
          Type: Api
          Properties:
            Path:  /insert
            Method: post
            RestApiId: !Ref DefaultApi

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sign_up.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region      
          # TABLE_NAME: !Ref DynamoTable
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref DynamoTable
      Events:
        SignupEvent:
          Type: Api
          Properties:
            Path:  /sign_up
            Method: post
            RestApiId: !Ref DefaultApi

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: login_fn.lambda_handler
      Environment:
        Variables:
          REGION: !Ref Region      
          # TABLE_NAME: !Ref DynamoTable
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      # Policies:
      #   - DynamoDBCrudPolicy:
      #       TableName: !Ref DynamoTable
      Events:
        LoginEvent:
          Type: Api
          Properties:
            Path:  /login
            Method: post
            RestApiId: !Ref DefaultApi


        # ///---------------Bucket-----------------/// 
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-bucket
      AccessControl: PublicReadWrite
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: 
              - '*'
            AllowedOrigins: 
              - '*'
            AllowedMethods:
              - PUT
              - POST 
              - DELETE
              - GET
            AllowedOrigins: 
              - '*'
            ExposedHeaders:
              - ETag
              - x-amz-meta-custom-header

Outputs:

  ListItemsFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for List Items function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/list/"

  ReadFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Read function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/read/"
  
  UpdateFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Update function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update/"

  DeleteFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Delete function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/delete/"

  InsertFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Insert function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/insert/"

  SignupFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Signup function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/sign_up/"

  LoginFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Login function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login/"

  BucketName:
    Value: !Ref S3Bucket
    Description: SLLCrudBucket Amazon S3 bucket with CORS enabled.

  DynamoTableName:
    Value: !Ref DynamoTable
    Description: Amazon DynamoDB Table



